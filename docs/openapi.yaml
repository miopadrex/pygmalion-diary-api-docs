# docs/openapi.yaml
openapi: 3.0.0
info:
  title: 피그말리온 다이어리 API
  description: 회사에서 좋았던 일을 기록하는 다이어리 서비스
  version: 1.0.0

servers:
  - url: https://umlnlzcebxiumpjdpvsq.supabase.co
    description: Supabase 서버

# 전역 security 제거 (각 API마다 다르게 설정)
# security:
#   - apiKey: []

paths:
  /auth/v1/signup:
    post:
      summary: 회원가입
      tags: [User Management]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "someone@email.com"
                password:
                  type: string
                  minLength: 6
                  example: "QRBtlWfSjmGdpSInaqDh"
                data:
                  type: object
                  properties:
                    nickname:
                      type: string
                      example: "테스터1234"
      responses:
        '200':
          description: 성공

  /auth/v1/token:
    post:
      summary: 로그인
      tags: [User Management]
      parameters:
        - name: grant_type
          in: query
          required: true
          schema:
            type: string
            enum: [password]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: "someone@email.com"
                password:
                  type: string
                  example: "QRBtlWfSjmGdpSInaqDh"
      responses:
        '200':
          description: 로그인 성공

  /rest/v1/user_profiles:
    get:
      summary: 내 정보 조회
      tags: [User Management]
      parameters:
        - name: select
          in: query
          required: false
          schema:
            type: string
            example: "*"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 내 정보 조회 성공
    patch:
      summary: 사용자 프로필 업데이트
      tags: [User Management]
      description: "특정 행을 업데이트합니다. 기본적으로 모든 행과 매치되므로 horizontal filters(eq, lt, is 등)를 사용하여 특정 행을 지정해야 합니다."
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
            example: "eq.34f64ffc-d684-4bd8-9687-7aa2ecfbec95"
          description: "사용자 ID 필터 (예: eq.user_id)"
        - name: Prefer
          in: header
          required: false
          schema:
            type: string
            enum: ["return=minimal", "return=representation"]
            example: "return=minimal"
          description: "응답 형식: minimal(최소), representation(업데이트된 데이터 반환)"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                other_column:
                  type: string
                  example: "otherValue"
                nickname:
                  type: string
                  example: "새로운닉네임"
                push_enabled:
                  type: boolean
                  example: true
      responses:
        '200':
          description: 내 정보 업데이트 성공

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
